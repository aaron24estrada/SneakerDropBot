version: '3.8'

services:
  # SneakerDropBot Main Application
  sneakerdropbot:
    build: .
    container_name: sneakerdropbot_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database
      - MONGODB_URL=mongodb://mongodb:27017
      - DATABASE_NAME=sneakerdropbot
      
      # Redis Cache
      - REDIS_URL=redis://redis:6379
      
      # Bot Configuration
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - ADMIN_IDS=${ADMIN_IDS}
      
      # Payment Processing
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # API Keys
      - NIKE_API_KEY=${NIKE_API_KEY}
      - ADIDAS_API_KEY=${ADIDAS_API_KEY}
      - FOOTLOCKER_API_KEY=${FOOTLOCKER_API_KEY}
      - STOCKX_API_KEY=${STOCKX_API_KEY}
      - GOAT_API_KEY=${GOAT_API_KEY}
      
      # Affiliate Codes
      - NIKE_AFFILIATE_CODE=${NIKE_AFFILIATE_CODE}
      - ADIDAS_AFFILIATE_CODE=${ADIDAS_AFFILIATE_CODE}
      - FOOTLOCKER_AFFILIATE_CODE=${FOOTLOCKER_AFFILIATE_CODE}
      - FINISHLINE_AFFILIATE_CODE=${FINISHLINE_AFFILIATE_CODE}
      - STOCKX_AFFILIATE_CODE=${STOCKX_AFFILIATE_CODE}
      - GOAT_AFFILIATE_CODE=${GOAT_AFFILIATE_CODE}
      
      # Rakuten Partners
      - EBAY_RAKUTEN_CODE=${EBAY_RAKUTEN_CODE}
      - EASTBAY_RAKUTEN_CODE=${EASTBAY_RAKUTEN_CODE}
      
      # Application Settings
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - WEBHOOK_URL=${WEBHOOK_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      
      # Performance Settings
      - MONITORING_INTERVAL=300
      - SCRAPING_INTERVAL=600
      - ALERT_COOLDOWN=300
      - REQUESTS_PER_MINUTE=60
      - CONCURRENT_REQUESTS=10
      
      # Limits
      - FREE_ALERTS_PER_DAY=5
      - PREMIUM_ALERTS_PER_DAY=1000
      - DATA_RETENTION_DAYS=90
      
      # Browser Settings
      - HEADLESS_BROWSER=true
      - BROWSER_TIMEOUT=30
      
      # Feature Flags
      - ENABLE_RESELL_TRACKING=true
      - ENABLE_PRICE_HISTORY=true
      - ENABLE_FLIP_ANALYSIS=true
      - ENABLE_EARLY_ACCESS=true
      - ENABLE_PUSH_NOTIFICATIONS=true
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./browser:/app/browser
    depends_on:
      - mongodb
      - redis
    networks:
      - sneakerbot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: sneakerdropbot_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=sneakerdropbot
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sneakerbot_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: sneakerdropbot_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - sneakerbot_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sneakerdropbot_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - sneakerdropbot
    networks:
      - sneakerbot_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sneakerdropbot_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sneakerbot_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sneakerdropbot_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sneakerbot_network

  # Log Aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sneakerdropbot_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sneakerbot_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: sneakerdropbot_logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - sneakerbot_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sneakerdropbot_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - sneakerbot_network

  # Background Task Worker (Celery)
  worker:
    build: .
    container_name: sneakerdropbot_worker
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - DATABASE_NAME=sneakerdropbot
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - mongodb
      - redis
    networks:
      - sneakerbot_network

  # Task Scheduler (Celery Beat)
  scheduler:
    build: .
    container_name: sneakerdropbot_scheduler
    restart: unless-stopped
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - DATABASE_NAME=sneakerdropbot
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - mongodb
      - redis
    networks:
      - sneakerbot_network

  # Flower (Celery Monitoring)
  flower:
    build: .
    container_name: sneakerdropbot_flower
    restart: unless-stopped
    command: celery -A app.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - sneakerbot_network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  sneakerbot_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
